// 防抖
let deBounce = (fn, delay) => {
    let timer = null;
    return function (...args) {
        if (timer) {
            clearTimeout(timer);
        }
 
        timer = setTimeout(()=> {
            fn(...args);
        }, delay)
    }
}
 
// 节流
let throttle = (fn, delay) => {
    let flag = true;
    return function (...args) {
        if (!flag) return;
        flag = false;
        setTimeout(() => {
            fn(...args);
            flag = true;
        }, delay)
    }
}
// 返回随机数
//返回一个min 和 max之间的随机整数。如果你只传递一个参数，那么将返回0和这个参数之间的整数。
// random(0, 100);
// => 42
let random = function（min，max）{ 
    if（max == null）{ 
      max = min; 
      min = 0; 
    } 
    return min + Math.floor（Math.random（）*（max-min + 1）
}

//格式化价格，12345.1  => 12,345.10
 let formatePrice = (value)=> {
    value = (value + '').replace(/\.\d{2}(\d*)/, (match, $1) => match.replace($1, ''))//强制截取两位小数
    if (isNaN(value)) {
      return ''
    } else {
      //补0
      var s = value.toString();
      var rs = s.indexOf('.');
      if (rs < 0) {
        rs = s.length;
        s += '.';
      }
      while (s.length <= rs + 2) {
        s += '0';
      }
    }
    //千分位打逗号
    return (s + '').replace(/(\d{1,3})(?=(\d{3})+(?:$|\.))/g, "$1,");
  }
  
/**
 * 获取Url参数，返回一个对象
 * ?a=1&b=2&c=3 ==> {a: "1", b: "2", c: "3"}
 * 不穿参数默认是当前url
 * */
let getUrlParam =function (href) {
  const url = href || document.location.toString()
  let arrObj = url.split('?')
  const params = Object.create(null)
  if (arrObj.length > 1) {
    arrObj = arrObj[1].split('&')
    arrObj.forEach(item => {
      item = item.split('=')
      params[item[0]] = item[1]
    })
  }
  return params
}
